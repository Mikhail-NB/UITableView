//
//  Комментарии.swift
//  LoadingDataIntoATableFromYourOwnSite
//
//  Created by Михаил on 14.10.2024.
//

//************************
// MARK: - Источник урока
//************************

// https://github.com/mohamedsamirmohamedsalem/Radio/tree/master

// *******************
// MARK: - Что делаем
//********************

// 1. Подготовим исходные данные для таблицы (4 ячейки с фирменным знаком радиостанции и ее названием)
// 1.1. stations.html - json файл с данными таблицы
// 1.1.1 name - название радиостанции
// 1.1.2. imageURL - имя файла с изображение знака радиостанции
// 1.2. 4 картинки знака радиостанции

// На Reg.ru на моем сайте https://codeexamples.ru/
// 2. На главной странице переходим на "Мененджер файлов" (левое меню)
// 3. Выбираем файл index.html и выбираем кнопку "Редактировать/Открыть" и в окно для кода копируем версию данных stations.html - из этого файла мы будем загружать данные в таблицу. Не забудьте нажать кнопку сохранить!!!
// 4. Теперь нам надо загрузить файл/файлы изображений для отображения в таблице, для чего
// 4.1. Возвращаемся в мененджер файлов.
// 4.2. Нажимаем кнопку "Загрузить"
// 4.3. Выбираем файлы с 4 картинками для загрузки
// 4.4. В "Мененджере файлов" убеждаемся, что файлы загружены.
// 4.5. ЗАПИШИТЕ ИЛИ ЗАПОМНИТЕ АДРЕС СТРАНИЦЫ С JSON ФАЙЛОМ  - он нам потребуются в дальнейшем
// 4.6. ВСЕ ГОТОВО, МОЖЕМ НАЧИНАТЬ РАБОТАТЬ НАД ПРОЕКТОМ

// 5. Формируем окно ViewController в раскадровщике
// 5.1. В контроллер добавляем таблицу с одной ячейкой
// 5.2. В ячейку помещаем UIImageView и UILabel
// 5.3. Присваиваем идентификатор к ячейке

// 6. Так как загрузка данныз в таблицу процесс не быстрый давайте организуем вывод на экран ячейки с текстом "Идет процесс загрузки"
// 6.1. Создадим NothingFoundCell.xib файл с вышеназванным текстом
// 6.1.1. File/New/File -> View
// 6.1.2. Удаляем появившиеся окно UIView
// 6.1.3. Через "+" добавляем TableViewCell в которое добавляем UILabel с нужным нам текстом
// 6.1.4. Присваиваем ячейки идентификатор NothingFound
// 6.1.5. Устанавливаем высоту ячейки в 117
// 6.1.6. Помещаем этот файл в папку Cells

// 7. Создадим модель наших данных
// 7.1. Создадим файл RadioStation со структурой наших данных
// 7.2. Поместим его в папку Model

// 8. Подготовим расширение для UIImageView с новым методом загрузки картинки из интернета
// 8.1. Создаем файл UIImageView+Download с методом  func loadImageWithURL(url: URL, callback: @escaping (UIImage) -> ()) - загрузки изображения по заданному URL адресу
// 8.2. Поместим его в папку UI Helpers

// 9. Добавим изображение ячеек в случае отсутствия изображения на сайте - stationImage

// 10. Теперь мы готовы писать код для ячеек
// 10.1. Создаем файл StationTableViewCell типа UITableViewCell и сохраним его в папке Cells
// 10.2. Очищаем его от исходных функций
// 10.3. В раскадровщике присваиваем ячейке класс StationTableViewCell
// 10.4. Созадем Outlet для картинки и метки и соединяем их с элементами в раскадровщике
// 10.5. Создаем метод конфигурации ячейки - func configureStationCell(station: RadioStation)

// 11. Вот очередь дошла и до загрузки данных с нашего сайта. В моем канале у меня есть видео по загрузке из интернета json файла используя библиотеку Alamofire. Поэтому чегодня я покажу как это сделать с помощью класса URLSeeeion
// 11.1. Создадим наш мененджер загрузки создав файл DataMananger.
// 11.2. Поместим его в папку Networking
// 11.3. Добавим библиотеку UIKit
// 11.4. Создаем вспомогательную структуру для получения удаленного JSON и два метода
// 11.4.1. В первом func getStationDataWithSuccess(success: @escaping ((_ metaData: Data?) -> Void) - проверяем корректность URL адреса JSON файла и вызываем метод загрузки данных
// 11.4.2. Во втором загружаем данные из интернета

// 12. Переходим в ViewController
// 12.1. Создаем в контроллере Outlet для таблицы
// 12.2. Создаем свойство stations (список каналов). С учетом длительности загрузки данных из интернета добавим к нему наблюдатель didSet которое будет перегружать таблицу по мере загрузки данных. Пичем перезагрузка будет происходить когда значение свойства ststions не будет равно предыдущему значению. При этом мы получили ошибку, так как Swift не понимает как сравнивать между собой наши структуры (ведь они имеют два элемента)

// 13. Подготовим уточнение по функции сравнения жлементов нашего массива структур
// 13.1. Для этого вернемся с нашей модели, подпишем ее на протокол Codable
// 13.2. Добавим расширение нашей структуры создав метод сравнения static func == (lhs: RadioStation, rhs: RadioStation) -> Bool. ОШИБКА УШЛА

// 14. Вернемся в ViewController
// 14.1. Дополним метод viewDidLOad
// 14.2. Подготовим метод загрузки полученного из интернета JSON файла в массив структур моделей
// 14.3. Подпишем наш контроллер на протокол TableViewDataSource и заполним исновные его методы
